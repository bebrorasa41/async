import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

# üîπ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7523023045:AAHue_1jPpvGD-q4mNwskVKFbgaXA00fcIE"

# üîπ –£–∫–∞–∂–∏—Ç–µ API-—Ç–æ–∫–µ–Ω UsersBox
USERSBOX_API_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGVkX2F0IjoxNzM4MjMwMDczLCJhcHBfaWQiOjE3MzgyMzAwNzN9.tMcpZxg94S9kYvwi8LsWoGxGjmEH0O2qFjhY-wlgIKg"

# üîπ –ë–∞–∑–æ–≤—ã–π URL API UsersBox
USERSBOX_API_URL = "https://api.usersbox.ru/v1/search"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤ UsersBox
SEARCH_PARAMETERS = """
üîç *–ë–æ—Ç –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º:*
- üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `+79279663494`
- üè† *–ê–¥—Ä–µ—Å:* `–ú–æ—Å–∫–≤–∞, –®–∏–ø–∏–ª–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 28–ê`
- üë§ *–§–ò–û:* `–ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á –ò–≤–∞–Ω–æ–≤ 25.11.1990`
- üîó *Username:* `elonmusk`
- üìß *Email:* `ceo@vkontakte.ru`
- üåç *IP-–∞–¥—Ä–µ—Å:* `77.88.0.10`
- üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å VK:* `https://vk.com/id13141150`

üí° _–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!_
"""

@dp.message(Command("start", "help"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help"""
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø –º–æ–≥—É –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–ª–µ—Ñ–æ–Ω, email –∏–ª–∏ IP), –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
        "üìå *–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —á—Ç–æ —è –º–æ–≥—É –∏—Å–∫–∞—Ç—å:*",
        parse_mode="Markdown"
    )
    await message.answer(SEARCH_PARAMETERS, parse_mode="Markdown")

async def search_usersbox(query: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ UsersBox"""
    headers = {
        "Authorization": USERSBOX_API_TOKEN
    }
    params = {"q": query}

    try:
        response = requests.get(USERSBOX_API_URL, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()

        if not data.get("data"):
            return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É."

        # üîç –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        result = "‚úÖ *–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n\n"
        for entry in data["data"]:
            for key, value in entry.items():
                result += f"‚Ä¢ *{key.capitalize()}*: `{value}`\n"
            result += "\n"

        return result
    except requests.exceptions.RequestException as e:
        return f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}"

@dp.message()
async def handle_query(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ UsersBox"""
    query = message.text.strip()
    
    if len(query) < 3:
        await message.answer("‚ùó –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return

    await message.answer("üîé –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚è≥")
    
    result = await search_usersbox(query)
    
    await message.answer(result, parse_mode="Markdown")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
